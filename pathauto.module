<?php
// $Id$

  // Look for any extensions installed in the pathauto directory
  // we include this here instead of hook_menu for a reason - see http://drupal.org/node/60526
  $pathauto_path = drupal_get_path('module', 'pathauto');
  include_once("$pathauto_path/pathauto_node.inc");
  include_once("$pathauto_path/pathauto_taxonomy.inc");
  include_once("$pathauto_path/pathauto_user.inc");
  include_once("$pathauto_path/contrib/pathauto_node_event.inc");
  include_once("$pathauto_path/contrib/pathauto_node_i18n.inc");
  unset($pathauto_path);

/**
 * Implementation of hook_help
 */  
function pathauto_help($section) {
  $output = '';
  switch ($section) {
    case 'admin/help#pathauto':
      $output = t("<p>Provides a mechanism for modules to automatically generate aliases for the content they manage.</p>
                  <h2>Settings</h2>
                  <p>The <strong>Maximum Alias Length</strong> and <strong>Maximum component length</strong> values
                  default to 100 and have a limit of 128 from pathauto.  This length is limited by the length of the dst 
                  column of the url_alias database table. The default database schema for this column is 128. If you 
                  set a length that is equal to that of the one set in the dst column it will cause problems in situations 
                  where the system needs to append additional words to the aliased URL. For example... URLs generated
                  for feeds will have '/feed' added to the end. You should enter a value that is the length of the dst
                  column minus the length of any strings that might get added to the end of the URL. The length of 
                  strings that might get added to the end of your URLs depends on which modules you have enabled and 
                  on your Pathauto settings. The recommended and default value is 100.</p>");
      break;
  }

  return $output;
}

/**
 * Implementation of hook_perm
 */
function pathauto_perm() {
  return array('administer pathauto');
}

/*
 * Implementation of hook_menu
 */
function pathauto_menu($may_cache) {
  
  $items = array();
  if (!$may_cache) {
    $items[] = array(
      'path' => 'admin/settings/pathauto',
      'title' => t('Pathauto'),
      'description' => t('Configure how pathauto generates clean URLs for your content.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('pathauto_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path' => 'admin/build/path/delete_all', 
      'title' => t('Delete all aliases'),
      'callback' => 'drupal_get_form', 
      'callback arguments' => array('pathauto_admin_delete_confirm'),
      'access' => user_access('administer site configuration'), 
      'type' => MENU_LOCAL_TASK,
    );
    
  }

  return $items;
}

/**
 * Callback for admin settings page
 * 
 */
function pathauto_admin_settings() {
  // Restrict administration of this module
  if (!user_access('administer pathauto')) {
    $form["error"] = array('#type' => 'item',
      '#title' => t('You are not authorized to access the pathauto settings.'));
    return system_settings_form($form);
  }

  $output = '';

  // Default words to ignore
  $ignore_words = array(
    "a", "an", "as", "at", "before", "but", "by", "for", "from",
    "is", "in", "into", "like", "of", "off", "on", "onto", "per",
    "since", "than", "the", "this", "that", "to", "up", "via",
    "with"
  );

  // Generate the form - settings applying to all patterns first
  $group_weight = -20;
  $form["general"] = array('#type' => 'fieldset', '#weight' => $group_weight,
    '#title' => t('General settings'), '#collapsible' => TRUE,
    '#collapsed' => TRUE);
  $group_weight++;

  $form["general"]["pathauto_verbose"] = array('#type' => 'checkbox',
    '#title' => t('Verbose'),
    '#default_value' => variable_get('pathauto_verbose', FALSE),
    '#description' => t('Display alias changes (except during bulk updates).'));

  $form["general"]["pathauto_separator"] = array('#type' => 'textfield',
    '#title' => t('Separator'), '#size' => 1, '#maxlength' => 1,
    '#default_value' => variable_get('pathauto_separator', '-'),
    '#description' => t('Character used to separate words in titles. This will replace any spaces and punctuation characters.'));

  $form["general"]["pathauto_quotes"] = array('#type' => 'radios',
    '#title' => t('Quotation marks'),
    '#default_value' => variable_get('pathauto_quotes', 0),
    '#options' => array(t('Remove'), t('Replace by separator')),
    );
    
  $form["general"]["pathauto_max_length"] = array('#type' => 'textfield',
    '#title' => t('Maximum alias length'), '#size' => 3, '#maxlength' => 3,
    '#default_value' => variable_get('pathauto_max_length', 100),
    '#description' => t('Maximum length of aliases to generate. 100 is recommended.  See <a href="@pathauto-help">Pathauto help</a> for details.', array('@pathauto-help' => url('admin/help/pathauto'))));

  $form["general"]["pathauto_max_component_length"] = array('#type' => 'textfield',
    '#title' => t('Maximum component length'), '#size' => 3, '#maxlength' => 3,
    '#default_value' => variable_get('pathauto_max_component_length', 100),
    '#description' => t('Maximum text length of any component in the alias (e.g., [title]). 100 is recommended. See <a href="@pathauto-help">Pathauto help</a> for details.', array('@pathauto-help' => url('admin/help/pathauto'))));

  $form["general"]["pathauto_max_bulk_update"] = array('#type' => 'textfield',
    '#title' => t('Maximum number of objects to alias in a bulk update'), '#size' => 3, '#maxlength' => 3,
    '#default_value' => variable_get('pathauto_max_bulk_update', 50),
    '#description' => t('Maximum number of objects of a given type which should be aliased during a a bulk update. The default is 50 and the recommended number depends on the speed of your server.  If you bulk updates "time out" or result in a "white screen" then reduce the number.'));

  $form["general"]["pathauto_update_action"] = array('#type' => 'radios',
    '#title' => t('Update action'), '#default_value' => variable_get('pathauto_update_action', 2),
    '#options' => array(t('Do nothing, leaving the old alias intact'),
          t('Create a new alias in addition to the old alias'),
          t('Create a new alias, replacing the old one')),
    '#description' => t('What should pathauto do when updating an existing content item which already has an alias?'));

  $disable_transliteration = TRUE;
  $disable_text = "";
  $path = drupal_get_path('module', 'pathauto');
  $transliteration_help = "When a pattern includes certain characters (such as those with accents) should Pathauto attempt to transliterate them into the ASCII-96 alphabet?  Transliteration is determined by the i18n-ascii.txt file in the Pathauto directory. <strong>This option is disabled on your site because you do not have an i18n-ascii.txt file in the Pathauto directory.</strong>";
  if (is_file($path . '/i18n-ascii.txt')) {
    $disable_transliteration = FALSE;
    $transliteration_help = "When a pattern includes certain characters (such as those with accents) should Pathauto attempt to transliterate them into the ASCII-96 alphabet?  Transliteration is determined by the i18n-ascii.txt file in the Pathauto directory.";
  }
  
  $form["general"]["pathauto_transliterate"] = array('#type' => 'checkbox',
    '#title' => t('Transliterate prior to creating alias'),
    '#default_value' => variable_get('pathauto_transliterate', FALSE),
    '#description' => t($transliteration_help),
    '#disabled' => $disable_transliteration,
  );

  $form["general"]["pathauto_ignore_words"] = array('#type' => 'textarea',
    '#title' => t('Strings to Remove'), '#default_value' => variable_get('pathauto_ignore_words', implode(",", $ignore_words)),
    '#description' => t('Words to strip out of the URL alias, separated by commas')
  );

  // Call the hook on all modules - an array of 'settings' objects is returned
  $all_settings = module_invoke_all('pathauto', 'settings');
  $modulelist = '';
  $indexcount = 0;
  foreach ($all_settings as $settings) {
    $items = '';
    $module = $settings->module;
    $modulelist[] = $module;
    $patterndescr = $settings->patterndescr;
    $patterndefault = $settings->patterndefault;
    $groupheader = $settings->groupheader;
    $supportsfeeds = isset($settings->supportsfeeds) ? $settings->supportsfeeds : NULL;
    variable_set('pathauto_'. $module .'_supportsfeeds', $supportsfeeds);

    $form[$module] = array('#type' => 'fieldset',
      '#title' => $groupheader, '#weight' => $group_weight,
      '#collapsible' => TRUE, '#collapsed' => TRUE);
    $group_weight++;

    // Prompt for the default pattern for this module
    $variable = 'pathauto_'. $module .'_pattern';
    $form[$module][$variable] = array('#type' => 'textfield',
      '#title' => $patterndescr,
      '#default_value' => variable_get($variable, $patterndefault),
      '#size' => 65, '#maxlength' => variable_get('pathauto_max_length', 100));

    // If the module supports a set of specialized patterns, set
    // them up here
    if (isset($settings->patternitems)) {
      foreach ($settings->patternitems as $itemname => $itemlabel) {
        $variable = 'pathauto_'. $module .'_'. $itemname .'_pattern';
        $form[$module][$variable] = array('#type' => 'textfield',
          '#title' => $itemlabel,
          '#default_value' => variable_get($variable, ''),
          '#size' => 65, '#maxlength' => variable_get('pathauto_max_length', 100));
      }
    }

    // Display the user documentation of placeholders supported by
    // this module, as a description on the last pattern
    $doc = "<dl>\n";
    foreach ($settings->placeholders as $name => $description) {
      $doc .= '<dt>'. $name .'</dt>';
      $doc .= '<dd>'. $description .'</dd>';
    }
    $doc .= "</dl>\n";
    $form[$module][$variable]["#description"] = $doc;

    // If the module supports bulk updates, offer the update action here
    if ($settings->bulkname) {
      $variable = 'pathauto_'. $module .'_bulkupdate';
      if (variable_get($variable, FALSE)) {
        variable_set($variable, FALSE);
        $function = $module.'_pathauto_bulkupdate';
        call_user_func($function);
      }
      $form[$module][$variable] = array('#type' => 'checkbox',
        '#title' => $settings->bulkname,
        '#default_value' => FALSE,
        '#description' => $settings->bulkdescr);
    }

    // Perform bulk updates of indexes for this module, if asked
    if ($do_index_bulkupdate) {
      $function = $module.'_pathauto_bulkupdate_indexes';
      if (is_callable($function)) {
        $indexcount += call_user_func($function);
      }
    }

    // If the module supports feeds, offer to generate aliases for them
    if ($supportsfeeds) {
      $variable = 'pathauto_'. $module .'_applytofeeds';
      $form[$module][$variable] = array('#type' => 'checkbox',
        '#title' => t('Create feed aliases'),
        '#default_value' => variable_get($variable, FALSE),
        '#description' => t('Also generate aliases for RSS feeds.'));
    }

  }

  if ($do_index_bulkupdate) {
    drupal_set_message(format_plural($indexcount,
      "Bulk generation of index aliases completed, one alias generated.",
      "Bulk generation of index aliases completed, @count aliases generated."));
  }

  // Keep track of which modules currently support pathauto
  variable_set('pathauto_modulelist', $modulelist);

  return system_settings_form($form);
}

/**
 * Check to see if there is already an alias pointing to a different item
 * 
 * @param string $alias
 *   A string alias (i.e. dst)
 * @param string $src
 *   A string that is the internal path
 * 
 *
 */
function _pathauto_alias_exists($alias, $src) {
  return db_result(db_query(
    "SELECT COUNT(dst) FROM {url_alias} WHERE dst = '%s' AND src != '%s'",
    $alias, $src));
}

/**
 * Clean up a string value provided by a module, resulting in a
 * string containing only alphanumerics and separators
 * @param $string
 *   A string to clean.
 * 
 */
function pathauto_cleanstring($string) {
  // Default words to ignore
  $ignore_words = array(
    "a", "an", "as", "at", "before", "but", "by", "for", "from",
    "is", "in", "into", "like", "of", "off", "on", "onto", "per",
    "since", "than", "the", "this", "that", "to", "up", "via",
    "with"
  );

  // Replace or drop apostrophes based on user settings
  $separator = variable_get('pathauto_separator', '-');
  $quotes = variable_get('pathauto_quotes', 0);
  $output = str_replace("'", ($quotes ? $separator : ''), $string);
  
  // Get rid of words that are on the ignore list
  $ignore_re = "\b". preg_replace("/,/", "\b|\b", variable_get('pathauto_ignore_words', $ignore_words)) ."\b";
  $output = preg_replace("/$ignore_re/ie", "", $output);

  // Optionally remove accents and transliterate to a subset of ASCII-96 characters.
  if (variable_get('pathauto_transliterate', FALSE)) { 

    static $i18n_loaded = false;
    static $translations = array();
    if (!$i18n_loaded) {
      $path = drupal_get_path('module', 'pathauto');
      if (is_file($path. '/i18n-ascii.txt')) {
        $translations = parse_ini_file($path. '/i18n-ascii.txt');
      }
      $i18n_loaded = true;
    }
  
    $output = strtr($output, $translations);
  
    // Preserve alphanumerics, everything else becomes a separator.
    $pattern = '/[^a-zA-Z0-9]+/ ';
    $output = preg_replace($pattern, $separator, $output);
  }

  // Always replace whitespace with the separator.
  $output = preg_replace("/\s+/", $separator, $output);

  // In preparation for pattern matching, 
  // escape the separator if and only if it is not alphanumeric)
  if (isset($separator)) {
    if (ctype_alnum($separator)) {
      $seppattern = $separator;
    } 
    else {
      $seppattern = '\\'. $separator;
    }
    // Trim any leading or trailing separators (note the need to
    $output = preg_replace("/^$seppattern+|$seppattern+$/", "", $output);

    // Replace multiple separators with a single one
    $output = preg_replace("/$seppattern+/", "$separator", $output);

  }


  // Enforce the maximum component length
  $maxlength = min(variable_get('pathauto_max_component_length', 100), 128);
  $output = drupal_substr($output, 0, $maxlength);

  return $output;
}

/**
 * Apply patterns to create an alias
 *
 * @param $module
 *   The name of your module (e.g., 'node')
 * @param $op
 *   Operation being performed on the content being aliased ('insert',
 *   'update', or 'bulkupdate')
 * @param $placeholders
 *   An array whose keys consist of the translated placeholders
 *   which appear in patterns (e.g., t('[title]')) and values are the
 *   actual values to be substituted into the pattern (e.g., $node->title)
 * @param $src
 *   The "real" URI of the content to be aliased (e.g., "node/$node->nid")
 * @param $type
 *   For modules which provided patternitems in hook_pathauto(),
 *   the relevant identifier for the specific item to be aliased (e.g.,
 *   $node->type)
 * @return
 *   The alias that was created
 */
function pathauto_create_alias($module, $op, $placeholders, $src, $type = NULL) {
  if (($op != 'bulkupdate') and variable_get('pathauto_verbose', FALSE)) {
    $verbose = TRUE;
  } 
  else {
    $verbose = FALSE;
  }

  // Retrieve and apply the pattern for this content type
  $pattern = '';
  if ($type) {
    $pattern = drupal_strtolower(variable_get('pathauto_'. $module .'_'. $type .'_pattern', ''));
  }
  if (!trim($pattern)) {
    $pattern = drupal_strtolower(variable_get('pathauto_'. $module .'_pattern', ''));
  }
  
  // No pattern? Do nothing (otherwise we may blow away existing aliases...)
  if (!trim($pattern)) {
    return '';
  }

  // Special handling when updating an item which is already aliased.
  $pid = NULL;
  if ($op == 'update' or $op == 'bulkupdate') {
    $result = db_query("SELECT pid, dst FROM {url_alias} WHERE src='%s'", $src);
    if ($data = db_fetch_object($result)) {
      // The item is already aliased, check what to do...
      switch (variable_get('pathauto_update_action', 2)) {
        // Do nothing
        case 0:
          return '';
        // Add new alias in addition to old one
        case 1:
          $oldalias = $data->dst;
          break;
        // Replace old alias - remember the pid to update
        case 2:
          $pid = $data->pid;
          $oldalias = $data->dst;
          break;
        default:
          break;
      }
    }
  }

  // Replace the placeholders with the values provided by the module,
  // and lower-case the result
  
  $alias = str_replace($placeholders['tokens'], $placeholders['values'], $pattern);
  $alias = drupal_strtolower($alias);
  
  // Two or more slashes should be collapsed into one
  $alias = preg_replace("/\/+/", "/", $alias);
  
  // Trim any leading or trailing slashes
  $alias = preg_replace("/^\/|\/+$/", "", $alias);

  $maxlength = min(variable_get('pathauto_max_length', 100), 128);
  $alias = drupal_substr($alias, 0, $maxlength);

  // If the alias already exists, generate a new variant
  $separator = variable_get('pathauto_separator', '-');
  if (_pathauto_alias_exists($alias, $src)) {
    for ($i = 0; _pathauto_alias_exists($alias . $separator . $i, $src); $i++) {
    }
    // Make room for the sequence number
    $alias = drupal_substr($alias, 0, $maxlength - 1 -($i/10 + 1));
    $alias = $alias . $separator . $i;
  }

  // If $pid is NULL, a new alias is created - otherwise, the existing
  // alias for the designated src is replaced
  _pathauto_set_alias($src, $alias, $pid, $verbose, $oldalias);

  // Also create a related feed alias if requested, and if supported
  // by the module
  if (variable_get('pathauto_'. $module .'_applytofeeds', FALSE)) {
    $feedappend = variable_get('pathauto_'. $module .'_supportsfeeds', '');
    // Handle replace case (get existing pid)
    _pathauto_set_alias("$src/$feedappend", "$alias/feed", NULL, $verbose);
  }

  return $alias;
}

/**
 * Verifies if the given path is a valid menu callback.
 * Taken from menu_execute_active_handler().
 *
 * @param $path
 *   A string containing a relative path.
 *
 * @return
 *   TRUE if the path already exists.
 */
function _pathauto_path_is_callback($path) {
  static $menu = NULL;
  if (is_null($menu)) {
    $menu = menu_get_menu();
  }
  
  // Determine the menu item containing the callback.
  return isset($menu["callbacks"][$path]);
}

/**
 * Private function for pathauto to create an alias
 * 
 * @param $src
 *   The internal path 
 * @param $dst
 *   The visible externally used path. 
 * @param $pid
 *   If the item is currently aliased, the pid for that item.
 * @param $verbose
 *   If the admin has enabled verbose, should be TRUE.  Else FALSE or NULL.
 * @param $oldalias
 *   If the item is currently aliased, the existing alias for that item.
 * 
 */
function _pathauto_set_alias($src, $dst, $pid = NULL, $verbose = FALSE, $oldalias = NULL) {
  // Alert users that an existing callback cannot be overridden automatically
  if (_pathauto_path_is_callback($dst)) {
    if ($verbose and user_access('create url aliases')) {
      drupal_set_message(t('Ignoring alias '). $dst .t(' due to existing path conflict'));
    }
    return;
  }

  // Skip replacing the current alias with an identical alias
  if ($oldalias != $dst) {
    path_set_alias($src, $dst, $pid, 1, 10);
    if ($verbose and user_access('create url aliases')) {
      if ($pid) {
        drupal_set_message(t('Created new alias %dst for %src, replacing %oldalias', array('%dst' => $dst, '%src' => $src, '%oldalias' => $oldalias)));
      } 
      else {
        drupal_set_message(t('Created new alias %dst for %src', array('%dst' => $dst, '%src' => $src)));
      }
    }
  }
}


/**
 * Implementation of hook_token_values() for Pathauto specific tokens
 */
function pathauto_token_values($type, $object = NULL) {
  switch ($type) {
    case 'node':
      $vid = db_result(db_query("SELECT t.vid FROM {term_node} r INNER JOIN {term_data} t ON r.tid = t.tid INNER JOIN {vocabulary} v ON t.vid = v.vid WHERE r.nid = %d ORDER BY v.weight, t.weight, t.name LIMIT 1", $object->nid));
      $category = db_fetch_object(db_query("SELECT t.tid, t.name FROM {term_data} t INNER JOIN {term_node} r ON r.tid = t.tid WHERE t.vid = %d AND r.nid = %d ORDER BY weight LIMIT 1", $vid, $object->nid));
      $category->vid = $vid;
    case 'taxonomy':
      if (!isset($category)) {
        $category = $object;
      }

      $parents = taxonomy_get_parents_all($category->tid);
      foreach ($parents as $parent) {
        $catpath = $parent->name .'/'. $catpath;
      }
      $values['catpath'] = $catpath;

      if ($type == 'taxonomy') { 
        $values['cat'] = $category->name;
      } 
      break;
  }
  return $values;
}

/**
 * Implementation of hook_token_list() for Pathauto specific tokens
 */
function pathauto_token_list($type = 'all') {
  if ($type == 'taxonomy' || $type == 'all') {
    $tokens['taxonomy']['catpath'] = t("As [cat], but including its supercategories separated by /.");
    return $tokens;
  }
  if ($type == 'node' || $type == 'all') {
    $tokens['node']['catpath'] = t("As [cat], but including its supercategories separated by /.");
    return $tokens;
  }
}

/**
 * Generalized function to get tokens across all Pathauto types
 * 
 * @param $object
 *   A user, node, or category object.
 * 
 * @return
 *   tokens for that object formatted in the way that Pathauto expects to see them.
 *  
 */
function pathauto_get_placeholders($type, $object) {
  $full = token_get_values($type, $object, TRUE);
  $tokens = token_prepare_tokens($full->tokens);
  $values = pathauto_clean_token_values($full->values);
  
  return array('tokens' => $tokens, 'values' => $values);
}

/**
 * Cleans tokens so they are URL friendly
 * 
 * @param $values
 *   An array of token values that need to be "cleaned" for use in the URL 
 * 
 */
function pathauto_clean_token_values($values) {
  foreach ($values as $key => $value) {
    $values[$key] = pathauto_cleanstring($value);
  }
  return $values;
}

/**
 * Menu callback: confirm deletion of all aliases
 */
function pathauto_admin_delete_confirm($aid = 0) {

  $form = array();
  $output = confirm_form($form,
                  t('Are you sure you want to delete ALL of your Path aliases?'),
                  'admin/build/path',
                  t('This action cannot be undone.'),
                  t('Delete all'),
                  t('Cancel'));
  return $output;
}

function pathauto_admin_delete_confirm_submit($form_id, $form_values) {
  db_query('DELETE FROM {url_alias}');
  drupal_set_message(t('All of your path aliases have been deleted.'));
  return 'admin/build/path';
}
