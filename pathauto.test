<?php
// $Id$

/**
 * @file
 * Functionality tests for Pathauto.
 *
 * @ingroup pathauto
 */

/**
 * Implements hook_simpletest_alter().
 */
function pathauto_simpletest_alter(&$groups) {
  // Enforce dependency on token for all pathauto tests.
  if (!drupal_get_filename('module', 'token')) {
    unset($groups['Pathauto']);
  }
}

/**
 * Unit tests for Pathauto functions.
 */
class PathautoUnitTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto unit tests',
      'description' => 'Unit tests for Pathauto functions.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp('path', 'token', 'pathauto');
    module_load_include('inc', 'pathauto');
  }

  /**
   * Test _pathauto_get_schema_alias_maxlength().
   */
  function testGetSchemaAliasMaxLength() {
    $this->assertIdentical(_pathauto_get_schema_alias_maxlength(), 128);
  }

  /**
   * Test the 'ignored words' removal functionality of pathauto_cleanstring().
   */
  function testIgnoredWordRemoval() {
    variable_set('pathauto_ignore_words', ', that, this, with, ');

    $tests = array(
      'this' => 'this',
      'this with that' => 'this-with-that',
      'this thing with that thing' => 'thing-thing',
    );

    foreach ($tests as $input => $expected) {
      $output = pathauto_cleanstring($input);
      $this->assertEqual($output, $expected, t("pathauto_cleanstring('@input') expected '@expected', actual '@output'", array('@input' => $input, '@expected' => $expected, '@output' => $output)));
    }
  }
}

/**
 * Helper test class with some added functions for testing.
 */
class PathautoTestHelper extends DrupalWebTestCase {
  protected $admin_user;

  function setUp() {
    // Call parent::setUp() allowing test cases to pass further modules.
    $modules = func_get_args();
    $modules = array_merge(array('path', 'token', 'pathauto'), $modules);
    call_user_func_array(array('parent', 'setUp'), $modules);

    // Set pathauto settings we assume to be as-is in this test.
    variable_set('pathauto_node_page_pattern', 'content/[title-raw]');

    $this->admin_user = $this->drupalCreateUser(array(
      'administer pathauto',
      'create page content',
      'edit own page content',
      'administer url aliases',
      'create url aliases',
    ));

    $this->drupalLogin($this->admin_user);
  }

  function assertToken($type, $object, $token, $expected) {
    $tokens = pathauto_token_values($type, $object);
    $this->assertEqual($tokens[$token], $expected, t("Token value for [@token] was '!actual', expected value '!expected'.", array('@token' => $token, '!actual' => $tokens[$token], '!expected' => $expected)));
  }
}

/**
 * Test basic pathauto functionality.
 */
class PathautoFunctionalTestCase extends PathautoTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto basic tests',
      'description' => 'Test basic pathauto functionality.',
      'group' => 'Pathauto',
    );
  }

  /**
   * Basic functional testing of Pathauto.
   */
  function testNodeEditing() {
    // Create node for testing.
    $random_title = $this->randomName(10);
    $title = ' Simpletest title ' . $random_title . ' [';
    $automatic_alias = 'content/simpletest-title-' . strtolower($random_title);
    $node = $this->drupalCreateNode(array('title' => $title, 'type' => 'page'));

    // Look for alias generated in the form.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertFieldChecked('edit-pathauto-perform-alias');
    $this->assertFieldByName('path', $automatic_alias, 'Proper automated alias generated.');

    // Check whether the alias actually works.
    $this->drupalGet($automatic_alias);
    $this->assertText($title, 'Node accessible through automatic alias.');

    // Manually set the node's alias.
    $manual_alias = 'content/' . $node->nid;
    $edit = array(
      'pathauto_perform_alias' => FALSE,
      'path' => $manual_alias,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertText(t('@type @title has been updated', array('@type' => 'Page', '@title' => $title)));

    // Check that the automatic alias checkbox is now unchecked by default.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertNoFieldChecked('edit-pathauto-perform-alias');
    $this->assertFieldByName('path', $manual_alias);

    // Submit the node form with the default values.
    $this->drupalPost(NULL, array(), t('Save'));
    $this->assertText(t('@type @title has been updated', array('@type' => 'Page', '@title' => $title)));

    // Test that the old (automatic) alias has been deleted and only accessible
    // through the new (manual) alias.
    $this->drupalGet($automatic_alias);
    $this->assertResponse(404, 'Node not accessible through automatic alias.');
    $this->drupalGet($manual_alias);
    $this->assertText($title, 'Node accessible through manual alias.');
  }
}

/*
 * Unit tests for the book tokens provided by Pathauto.
 */
class PathautoBookTokenTestCase extends PathautoTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto book tokens',
      'description' => 'Unit tests for the book tokens provided by Pathauto.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp('book');

    variable_set('book_allowed_types', array('book', 'page'));
    variable_set('pathauto_node_book_pattern', '[bookpathalias]/[title-raw]');
  }

  function testBookPathAlias() {
    // Add a non-book node.
    $non_book_node = $this->drupalCreateNode(array('type' => 'book'));
    $this->assertToken('node', $non_book_node, 'bookpathalias', '');

    // Add a root book page.
    $parent_node = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Root', 'book' => array('bid' => 'new')));
    $this->assertToken('node', $parent_node, 'bookpathalias', '');

    // Add a first child page.
    $child_node1 = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Sub page1', 'book' => array('bid' => $parent_node->book['bid'], 'plid' => $parent_node->book['mlid'])));
    $this->assertToken('node', $child_node1, 'bookpathalias', 'root');

    // Add a second child page.
    $child_node2 = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Sub page2', 'book' => array('bid' => $parent_node->book['bid'], 'plid' => $parent_node->book['mlid'])));
    $this->assertToken('node', $child_node2, 'bookpathalias', 'root');

    // Add a child page on an existing child page.
    $sub_child_node1 = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Sub-sub Page1', 'book' => array('bid' => $parent_node->book['bid'], 'plid' => $child_node1->book['mlid'])));
    $this->assertToken('node', $sub_child_node1, 'bookpathalias', 'root/sub-page1');
  }
}

/*
 * Unit tests for the taxonomy tokens provided by Pathauto.
 */
class PathautoTaxonomyTokenTestCase extends PathautoTestHelper {
  protected $vocab;

  public static function getInfo() {
    return array(
      'name' => 'Pathauto taxonomy tokens',
      'description' => 'Unit tests for the taxonomy tokens provided by Pathauto.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp('taxonomy');

    variable_set('pathauto_taxonomy_pattern', 'category/[vocab-raw]/[cat-raw]');

    // Reset the static taxonomy.module caches.
    taxonomy_vocabulary_load(0, TRUE);
    taxonomy_get_term(0, TRUE);

    $this->vocab = $this->addVocabulary();
  }

  /**
   * Test the [catpath] and [catalias] tokens.
   */
  function testCatTokens() {
    $term1 = $this->addTerm($this->vocab);
    $this->assertToken('taxonomy', $term1, 'catpath', $term1->name);
    $this->assertToken('taxonomy', $term1, 'catalias', "category/{$this->vocab->name}/{$term1->name}");

    // Change the term name to check that the alias is also changed.
    // Regression test for http://drupal.org/node/822174.
    $term1->oldname = $term1->name;
    $term1->name = drupal_strtolower($this->randomName());
    $form_values = (array) $term1;
    taxonomy_save_term($form_values);
    $this->assertToken('taxonomy', $term1, 'catpath', $term1->name);

    $term2 = $this->addTerm($this->vocab, array('parent' => $term1->tid));
    $this->assertToken('taxonomy', $term2, 'catpath', "{$term1->name}/{$term2->name}");
    $this->assertToken('taxonomy', $term2, 'catalias', "category/{$this->vocab->name}/{$term2->name}");

    $term3 = $this->addTerm($this->vocab, array('parent' => $term2->tid, 'name' => ' foo/bar fer|zle '));
    $this->assertToken('taxonomy', $term3, 'catpath', "{$term1->name}/{$term2->name}/foobar-ferzle");
    $this->assertToken('taxonomy', $term3, 'catalias', "category/{$this->vocab->name}/foobar-ferzle");
  }

  /**
   * Test the [termpath] token.
   */
  function testTermTokens() {
    $term1 = $this->addTerm($this->vocab, array('weight' => 5));
    $term2 = $this->addTerm($this->vocab, array('weight' => -5));
    $term3 = $this->addTerm($this->vocab, array('weight' => 0));

    $node = $this->drupalCreateNode(array(
      'type' => 'story',
      'taxonomy' => array($term1->tid, $term2->tid, $term3->tid),
    ));
    $this->assertToken('node', $node, 'termpath', $term2->name);
    $this->assertToken('node', $node, 'termalias', "category/{$this->vocab->name}/{$term2->name}");

    $non_term_node = $this->drupalCreateNode(array('type' => 'story'));
    $this->assertToken('node', $non_term_node, 'termpath', '');
    $this->assertToken('node', $non_term_node, 'termalias', '');
  }

  function addVocabulary(array $vocabulary = array()) {
    $vocabulary += array(
      'name' => drupal_strtolower($this->randomName(5)),
      'nodes' => array('page' => 'page'),
    );
    taxonomy_save_vocabulary($vocabulary);
    return (object) $vocabulary;
  }

  function addTerm(stdClass $vocabulary, array $term = array()) {
    $term += array(
      'name' => drupal_strtolower($this->randomName(5)),
      'vid' => $vocabulary->vid,
    );
    taxonomy_save_term($term);
    return (object) $term;
  }
}
