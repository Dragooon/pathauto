<?php
// $Id$

/**
 * @file
 * Functionality tests for Pathauto.
 *
 * @ingroup pathauto
 */

/**
 * Unit tests for Pathauto functions.
 */
class PathautoUnitTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto unit tests',
      'description' => 'Unit tests for Pathauto functions.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp('path', 'pathauto');
    module_load_include('inc', 'pathauto');
  }

  /**
   * Test _pathauto_get_schema_alias_maxlength().
   */
  function testGetSchemaAliasMaxLength() {
    $this->assertIdentical(_pathauto_get_schema_alias_maxlength(), 128);
  }
}

/**
 * Test basic pathauto functionality.
 */
class PathautoFunctionalTestCase extends DrupalWebTestCase {
  private $admin_user;
  private $content_type;

  public static function getInfo() {
    return array(
      'name' => 'Pathauto basic tests',
      'description' => 'Test basic pathauto functionality.',
      'group' => 'Pathauto',
      'dependencies' => array('token'),
    );
  }

  function setUp() {
    parent::setUp('path', 'token', 'pathauto');

    $this->content_type = $this->drupalCreateContentType();
    $this->admin_user = $this->drupalCreateUser(array(
      'administer pathauto',
      'create '. $this->content_type->type .' content',
      'edit own '. $this->content_type->type .' content',
      'administer url aliases',
      'create url aliases',
    ));

    // Set pathauto settings we assume to be as-is in this test.
    variable_set('pathauto_node_'. $this->content_type->type .'_pattern', 'content/[title-raw]');
    //variable_set('pathauto_separator', '-');
    //variable_set('pathauto_case', '1'); // lowercase
    //variable_set('pathauto_max_length', '100');
    //variable_set('pathauto_max_component_length', '100');
    variable_set('pathauto_punctuation_underscore', '2'); // no action

    $this->drupalLogin($this->admin_user);
  }

  /**
   * Basic functional testing of Pathauto.
   */
  function testNodeEditing() {
    // Create node for testing.
    $random_title = $this->randomName(10); // this contains _
    $title = ' Simpletest title ' . $random_title . ' [';
    $automatic_alias = 'content/simpletest-title-' . strtolower($random_title);
    $node = $this->drupalCreateNode(array('title' => $title, 'type' => $this->content_type->type));

    // Look for alias generated in the form.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertFieldChecked('edit-pathauto-perform-alias');
    $this->assertFieldByName('path', $automatic_alias, 'Proper automated alias generated.');

    // Check whether the alias actually works.
    $this->drupalGet($automatic_alias);
    $this->assertText($title, 'Node accessible through automatic alias.');

    // Manually set the node's alias.
    $manual_alias = 'content/' . $node->nid;
    $edit = array(
      'pathauto_perform_alias' => FALSE,
      'path' => $manual_alias,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertText(t('@type @title has been updated', array('@type' => $this->content_type->type, '@title' => $title)));

    // Check that the automatic alias checkbox is now unchecked by default.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertNoFieldChecked('edit-pathauto-perform-alias');
    $this->assertFieldByName('path', $manual_alias);

    // Submit the node form with the default values.
    $this->drupalPost(NULL, array(), t('Save'));
    $this->assertText(t('@type @title has been updated', array('@type' => $this->content_type->type, '@title' => $title)));

    // Test that the old (automatic) alias has been deleted and only accessible
    // through the new (manual) alias.
    $this->drupalGet($automatic_alias);
    $this->assertResponse(404, 'Node not accessible through automatic alias.');
    $this->drupalGet($manual_alias);
    $this->assertText($title, 'Node accessible through manual alias.');
  }
}

/*
 * Unit tests for the book tokens provided by Pathauto.
 */
class PathautoBookTokenTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto book tokens',
      'description' => 'Unit tests for the book tokens provided by Pathauto.',
      'group' => 'Pathauto',
    );
  }

  function setUp() {
    parent::setUp('path', 'pathauto', 'book');
    variable_set('book_allowed_types', array('book', 'page'));
  }

  function testBookPathAlias() {
    variable_set('pathauto_node_book_pattern', '[bookpathalias]/[title-raw]');

    // Add a root book page.
    $parent_node = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Root', 'book' => array('bid' => 'new')));
    $this->assertNodeAlias($parent_node, 'root');

    // Add a first child page.
    $child_node1 = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Sub page1', 'book' => array('bid' => $parent_node->book['bid'], 'plid' => $parent_node->book['mlid'])));
    $this->assertNodeAlias($child_node1, 'root/sub-page1');

    // Add a second child page.
    $child_node2 = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Sub page2', 'book' => array('bid' => $parent_node->book['bid'], 'plid' => $parent_node->book['mlid'])));
    $this->assertNodeAlias($child_node2, 'root/sub-page2');

    // Add a child page on an existing child page.
    $sub_child_node1 = $this->drupalCreateNode(array('type' => 'book', 'title' => 'Sub-sub Page1', 'book' => array('bid' => $parent_node->book['bid'], 'plid' => $child_node1->book['mlid'])));
    $this->assertNodeAlias($sub_child_node1, 'root/sub-page1/sub-sub-page1');
  }

  function assertNodeAlias(stdClass $node, $expected_alias) {
    $alias = drupal_get_path_alias('node/' . $node->nid);
    $this->assertEqual($alias, $expected_alias);
  }
}
